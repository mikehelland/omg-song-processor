<!DOCTYPE html>
<html>
<head>
    <style>
        html, body, canvas {
            height: 100%;
            width: 100%;
            padding: 0;
            margin: 0;
            box-sizing: border-box;
            overflow: hidden;
            font-family: 'Courier New', Courier, monospace;
        }

        canvas {
            background-color: black;
        }

        .dialog {
            position: absolute;
            top: 20px;
            left: 33%;
            border: 2px solid white;
            color:white;
            background-color: black;
            padding: 20px;
            width:33%
        }

        #meter {
            position:relative;
            height:50px;
        }
        #output {
            position: absolute;
            bottom: 0px;
            width:50%;
            opacity: 0.5;
            left: 25%;
            color:white;
        }
        #game-over {
            display:none;
        }
        #game-over li {
            margin: 18px;
            font-size: 1.5em;
            list-style: none;
            cursor: pointer;
        }
        #game-over li:hover {
            text-decoration: underline;
        }
        .selected-menu-option {
            list-style-type: square !important;  
        }
    </style>
</head>
<body>
    <canvas id="main-canvas"></canvas>
    <div id="welcome" class="dialog">
        <h4>To Win</h4>
        <p>Get 3 or more notes.</p>
        
        <ul>
            <li>
                Hit the ball, get a note.
            </li>
            <br>
            <li>
                listen to your melody!
            </li>
        </ul>

        <hr>

        <h4>To Start</h4>
        <p>Sing/Play your most natural pitch.</p>
        <p>Not too high! Not too low!</p>
        <div id="meter">
            meter
        </div>
        <p>Hold that pitch for a second or two and the game will start.</p>        

    </div>

    <div id="output">
        <span id="notes"></span>
        <span id="next-note"></span>
    </div>

    <div id="game-over" class="dialog">
        You got <span id="note-count">x</span> notes!
        <br>
        <br>
        What now?
        <ul>
            <li id="game-over-keep-going">Keep Going</li>
            <li id="game-over-play-melody">Play Melody</li>
            <li id="game-over-edit-melody">Open in Melody Editor</li>
            <!--<li id="game-over-start-o er">Start Over</li>-->
        </ul>
    </div>


    <script src="/apps/music/js/libs/peakmeter.js"></script>

    <script src="tuner/aubio.js"></script>
    <script src="tuner/tuner.js"></script>

    <script>

        let notesHit = []

        let output = document.getElementById("output")
        let notes = document.getElementById("notes")
        let nextNote = document.getElementById("next-note")

        let canvas = document.getElementById("main-canvas")
        let ctx = canvas.getContext("2d")

        let w = 640 //canvas.clientWidth
        let h = 480 //canvas.clientHeight

        let ball = {x: w/2, y: h/2, dx: 3, dy: 4, w: 6}
        let player1 = {x: 12, y: h/2, nextHitPlace: -1}
        let player2 = {x: w - 12, y: h/2, nextHitPlace: 1}
        let move = 0
        let paused = false

        let target
        let dy

        let players = 1

        let gameState = 0

        let hitNote = note => {
            notesHit.push(note)
            notes.innerHTML += note.name + note.octave + "&nbsp;&nbsp;&nbsp;"
        }

        let goMenu 
        let gameOver = () => {
            goMenu = document.getElementById("game-over")
            goMenu.style.display = "block"
            //gameOverMenuOption = 0
            //goMenu.getElementsByTagName("li")[gameOverMenuOption].classList.add("selected-menu-option")
        }


        canvas.height = h
        let draw = () => {
            canvas.width = w

            if (!paused) {
                ball.x += ball.dx
                ball.y += ball.dy
                player1.y += move

                target = ball.y - player2.nextHitPlace
                dy = target - player2.y
                if (dy > 5) dy = 5
                if (dy < -5) dy = -5
                player2.y += dy

                if (players < 1) {
                    target = ball.y - player1.nextHitPlace
                    dy = target - player1.y
                    if (dy > 5) dy = 5
                    if (dy < -5) dy = -5
                    player1.y += dy
                }
            }


            if (ball.y >= h || ball.y <= 0) {
                ball.dy = ball.dy * -1
            }

            if (paused) {

            }
            else if (ball.x >= player2.x - 9) {
                if (ball.y >= player2.y - 30 && ball.y <= player2.y + 30) {
                    ball.dx = ball.dx * -1

                    ball.dy = (ball.y - player2.y) / 4

                    player2.nextHitPlace = Math.random() * 60 - 30
                }
                else {
                    paused = true
                    ball.dx = Math.abs(ball.dx)
                    ball.dy = 4

                    setTimeout(() => {
                        ball.x = w/2
                        ball.y = h/2
                        paused = false
                    }, 2000)
                }
            }
            else if (ball.x <= player1.x + 9) {
                if (ball.y >= player1.y - 30 && ball.y <= player1.y + 30) {
                    ball.dx = ball.dx * -1

                    ball.dy = (ball.y - player1.y) / 4

                    player1.nextHitPlace = Math.random() * 60 - 30

                    hitNote(lastNote)
                }
                else {
                    paused = true
                    ball.dx = Math.abs(ball.dx)
                    ball.dy = 4
                        
                    if (notesHit.length > 2) {
                        gameOver()
                    }
                    else {
                        setTimeout(() => {
                            ball.x = w/2
                            ball.y = h/2
                            paused = false
                        }, 2000)
                    }
                }
            }
            
            ctx.strokeStyle = "white"
            ctx.lineWidth = 12

            ctx.beginPath()
            ctx.moveTo(w / 2, 0)
            ctx.lineTo(w / 2 + 1, h)
            ctx.stroke()

            ctx.beginPath()
            ctx.moveTo(player1.x, player1.y - 24)
            ctx.lineTo(player1.x, player1.y + 24)
            ctx.stroke()
            
            ctx.beginPath()
            ctx.moveTo(player2.x, player2.y - 24)
            ctx.lineTo(player2.x, player2.y + 24)
            ctx.stroke()
            
            ctx.fillStyle = "white"
            ctx.fillRect(ball.x - 6, ball.y - 6, 12, 12)
            
            if (gameState > 0) {
                requestAnimationFrame(draw) 
            }
        }

        document.body.onkeydown = e => {

            if (e.key === "ArrowUp") {
                move = -5
            }
            if (e.key === "ArrowDown") {
                move = 5
            }
        }
        document.body.onkeyup = e => {
            if (e.key === "ArrowUp") {
                move = 0
            }
            if (e.key === "ArrowDown") {
                move = 0
            }
        }

        let referencePitch
        let newY
        let movePlayer1 = (info) => {
            target =  Math.min(h, Math.max(0, h / 2 + h / 18 * (referencePitch - info.value)))
            dy = target - player1.y
            if (dy > 50) dy = 50
            if (dy < -50) dy = -50
            player1.y += dy
        }

        let updateMeter = () => {
            if (gameState === 0) {
                meter.updateMeter()
                requestAnimationFrame(updateMeter)
            }
        }

        let referenceCandidate
        let referenceCounter = 0

        let calculateReferencePitch = () => {
            let total = 0
            for (var i = 0; i < referencePitchData.length; i++) {
                total += referencePitchData[i]
            }
            referencePitch = total / referencePitchData.length
        }

        let meter
        let analyzer

        let lastNote
        let onDetect = function (info) {

            // haven't started, need  a reference pitch
            if (gameState === 0) {
                if (meter && meter.peakInstantaneousPowerDecibels > -20) {
                    
                    if (!referenceCandidate || referenceCandidate !== info.value) {
                        referenceCandidate = info.value
                        referenceCounter = 0
                    }
                    else {
                        referenceCounter++

                        if (referenceCounter === 9) {
                            //got it, start the game
                            referencePitch = referenceCandidate
                            document.getElementById("welcome").style.display = "none"
                            gameState = 1
                            draw()
                        }
                    }
                }
                else {
                    referenceCounter = 0
                    referenceCandidate = null
                }

                console.log(info)
            }
            else if (gameState === 1) {
                lastNote = info
                nextNote.innerHTML = info.name + info.octave
                movePlayer1(info)
            }
        }

        function start() {
            
            tuner = new Tuner()
            tuner.onNoteDetected = function(note) {
                if (self.lastNote === note.name) {
                    onDetect(note)
                } else {
                    self.lastNote = note.name
                }
            }

            tuner.init()
            
            meter = new PeakMeter(tuner.analyser, document.getElementById("meter"), tuner.audioContext);
            requestAnimationFrame(updateMeter)
        
            draw()

	    }

        start()

        document.getElementById("game-over-keep-going").onclick = e => {
            goMenu.style.display = "none"
            paused = false
        }
        document.getElementById("game-over-play-melody").onclick = e => {
            goMenu.style.display = "none"
            paused = false
        }
        document.getElementById("game-over-edit-melody").onclick = e => {
            
        }
    </script>

</body>

</html>

